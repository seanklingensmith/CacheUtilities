<?xml version="1.0" encoding="UTF-8"?>
<Export generator="Cache" version="25" zv="Cache for UNIX (Red Hat Enterprise Linux for x86-64) 2014.1.3 (Build 775)" ts="2016-10-18 12:06:23">
<Class name="SDK.Utils">
<Super>%RegisteredObject</Super>
<TimeChanged>64202,59167.753145</TimeChanged>
<TimeCreated>64201,43355.933117</TimeCreated>

<Method name="Load">
<Description>
TODO: improve error handling
TODO: streams</Description>
<ClassMethod>1</ClassMethod>
<Implementation><![CDATA[
	try {
		set cls = ##class(%Dictionary.ClassDefinition).%OpenId($classname())
		for i=1:1:cls.XDatas.Count() {
			set sc = ..LoadInternal(cls.XDatas.GetAt(i).Name)
			if 'sc do $system.OBJ.DisplayError(sc)		
		}
	} catch (e) {
		do e.OutputToDevice()
	}
]]></Implementation>
</Method>

<Parameter name="BEGINCOMMENT">
<Default># Added by SDK.Utils</Default>
</Parameter>

<Parameter name="ENDCOMMENT">
<Default># End SDK.Utils</Default>
</Parameter>

<Method name="LoadInternal">
<ClassMethod>1</ClassMethod>
<FormalSpec>element</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set xdata = ##class(%Dictionary.XDataDefinition).%OpenId($classname()_"||"_element)
	if xdata = "" quit $System.Status.Error(5001,"XDATA not found: "_element)
	
	set sc = ##class(%XML.XPATH.Document).CreateFromStream(xdata.Data,.doc)
	if 'sc quit sc
	
	set sc = ..evalXPath(doc,"@os",.isOS,"false")
	if 'sc quit sc
	
	set sc = ..evalXPath(doc,"@append",.append,"false")
	if 'sc quit sc
	
	set sc = ..evalXPath(doc,"@name",.name)
	if 'sc quit sc
	
	set sc = ..evalXPath(doc,"text()",.text)
	if 'sc quit sc
	
	set isOS = (isOS="true")
	set append = (append="true")
	set name = ..expandString(name,.sc)
	if 'sc quit sc
	set text = $zstrip(text,"<>",$C(13,10))
	
	set isUnix = ($zversion["UNIX")
	
	if isOS {
		if 'isUnix quit $$$OK // OS scripts not supported on Windows/VMS
		
		set file = ##class(%Stream.FileCharacter).%New()
		set file.Filename=name
		
		set addComments = 0
		
		if append {
			// read text, remove old definition (if present)
			set addComments = 1
			set oldtext = file.Read($system.SYS.MaxLocalLength())
			set s = $find(oldtext,..#BEGINCOMMENT) 
			if s'=0 {
				set e = $find(oldtext,..#ENDCOMMENT,s)-1
				if e=0 set e = s
				set s = s-$length(..#BEGINCOMMENT)
				set $extract(oldtext,s,e)=""
			}
			
			set oldtext = $zstrip(oldtext,">",$C(13,10))
			
			do file.Clear()
			do file.Write(oldtext)
		} else {
			do file.Clear()
		}
		
		if addComments {
			do file.WriteLine(file.LineTerminator)
			do file.WriteLine(..#BEGINCOMMENT)
		}
		do file.Write(text)
		if addComments {
			do file.WriteLine()
			do file.WriteLine(..#ENDCOMMENT)
		}
		do file.%Save()
	} else {
		set rtn = ##class(%Routine).%New(name)
		if rtn="" quit $system.Status.Error(5001,"Invalid routine name: "_name)
		do rtn.Write(text)
		set sc = rtn.%Save()
		if 'sc quit sc
		
		set sc=$System.OBJ.CompileList(name_".mac","ck-d")
		if 'sc quit sc
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<Method name="expandString">
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[str,&sc:%Status]]></FormalSpec>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[
	set sc = $$$OK
	set value("home") = $System.Util.GetEnviron("HOME")
	set v = $System.Util.InstallDirectory()
	if ($e(v,*)="/")||($e(v,*)="\") {
		set $e(v,*)=""
	}
	set value("install") = v
	
	while str["{$" {
		set s=$f(str,"{$")
		set e=$f(str,"}",s)-2
		
		set var = $zcvt($e(str,s,e),"L")
		set val = $g(value(var))
		
		if val="" {
			set sc = $System.Status.Error(5001,"Invalid variable: $"_var)
			set str = ""
			quit
		}
		
		set $e(str,s-2,e+1)=val
	}
	
	quit str
]]></Implementation>
</Method>

<Method name="evalXPath">
<ClassMethod>1</ClassMethod>
<FormalSpec>doc,exp,val,default=""</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	set sc = doc.EvaluateExpression("/code",exp,.res)
	if 'sc quit sc
	
	if res.Size'=0 {
		set val = res.GetAt(1).Value
	} else {
		if default'="" { 
			set val = default
		} else {
			quit $System.Status.Error(5001,"@"_exp_" not defined.")
		}
	}
	
	quit $$$OK
]]></Implementation>
</Method>

<UDLText name="T">
<Content><![CDATA[
// Payload:

]]></Content>
</UDLText>

<XData name="zlangc">
<Data><![CDATA[
<code name="%ZLANGC00" os="false">
<![CDATA[
ZISCLOG() public {
	set file="/tmp/isclog.txt"
	set io=$IO
	
	try {
		open file:"WNS"
		use file
		zwrite ^%ISCLOG
		close file
		use io
	} catch e {
		use io
		try { close file } catch {}
		do e.OutputToDevice()
	}
}

ZERR() public {
	do $system.OBJ.DisplayError()
}

ZSOAP(enable=1) public {
	if enable {
		set ^ISCSOAP("Log")="ios"
		set ^ISCSOAP("LogFile")=$System.Util.InstallDirectory()_"mgr/"_$zcvt($namespace,"L")_"soap.log"
		write "SOAP log enabled in: "_^ISCSOAP("LogFile"),!
	} else {
		kill ^ISCSOAP
		write "SOAP log disabled",!
	}
}

ZSTACK() public {
	set $ecode=""
	
	for i=$stack-1:-1:1 {
		write $stack(i),?8,$stack(i,"PLACE"),?40,$stack(i,"MCODE"),!
	}
}]]]]><![CDATA[></code>
]]></Data>
</XData>

<XData name="instanceVars">
<Data><![CDATA[
<code name="{$HOME}/cache-instance-vars.sh" os="true">
	<![CDATA[#!/bin/bash

IFS=$'\n'
arr=( $(ccontrol qlist) )
for res in ${arr[*]}
do 
  name=`echo $res | cut -d "^" -f 1` 
  path=`echo $res | cut -d "^" -f 2` 
  build=`echo $res | cut -d "^" -f 3` 
  start=`echo $res | cut -d "^" -f 4` 
  cpf=`echo $res | cut -d "^" -f 5` 
  ssport=`echo $res | cut -d "^" -f 6` 
  webport=`echo $res | cut -d "^" -f 7` 
  javaport=`echo $res | cut -d "^" -f 8` 
  state=`echo $res | cut -d "^" -f 9`
  
  export ${name}SS=$ssport
  export ${name}WEB=$webport
  export ${name}CPF=$path/$cpf
  export ${name}MGR=$path/mgr
  export ${name}BIN=$path/bin
  export ${name}CC=$path/mgr/cconsole.log
  export ${name}DIR=$path

  unset name path build start cpf ssport webport javaport state
done

unset arr res
]]]]><![CDATA[>
	</code>
]]></Data>
</XData>

<XData name="bashprofile">
<Data><![CDATA[
<code name="{$HOME}/.bash_profile" os="true" append="true"><![CDATA[
 . cache-instance-vars.sh]]]]><![CDATA[></code>
]]></Data>
</XData>

<XData name="bashrc">
<Data><![CDATA[
<code name="{$HOME}/.bashrc" os="true" append="true"><![CDATA[
sdk_cbounce() {
	if [ -z "$1" ]
	then
		ccontrol stop `ccontrol default` restart quietly
	else
		ccontrol stop $1 restart quietly
	fi
}
sdk_csession() {
	if [ -z "$1" ] 
	then
		csession `ccontrol default`
	else
		csession $1
	fi
}

alias cbounce='sdk_cbounce'
alias cs='sdk_csession']]]]><![CDATA[></code>
]]></Data>
</XData>
</Class>
</Export>
